<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--пакет, в котором будет проходить сканирование-->
    <!--По сути, <context:component-scan> обнаруживает аннотации путем сканирования пакетов . -->
    <!--Другими словами, он сообщает Spring, -->
    <!--какие пакеты необходимо сканировать для поиска аннотированных bean-компонентов или компонентов.-->

    <!--@Component , @Repository , @Service , @Controller , @RestController и @Configuration -->
    <!--— это несколько объектов, которые <context:component-scan> может обнаружить.-->
    <context:component-scan base-package="com.zaurtregulov.spring.mvc"/>
    <!--добавление поддержки форматирования, валидации и различных преобразований-->
    <mvc:annotation-driven/>
    <!--нужно, чтобы Spring корректно отрабатывал наши классы с аннотацией @Aspect-->
    <aop:aspectj-autoproxy/>

    <!--чтобы мы могли обращаться к нашим view напрямую по имени-->
    <bean
            class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/view/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--Hibernate будет использовать Connection pool для связи с БД-->
    <!--Позволяет экономить время на подключение к БД-->
    <!--это всё нужно, чтобы соединить spring mvc с hibernate и показать ему с какой базой он будет работать-->

    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
          destroy-method="close">
        <property name="driverClass" value="org.postgresql.Driver"/>
        <property name="jdbcUrl" value="jdbc:postgresql://localhost:5432/users"/>
        <property name="user" value="postgres"/>
        <property name="password" value="123"/>
    </bean>

    <!--SessionFactory - чтобы получить сессию, чтобы подключиться к БД-->
    <bean id="factory"
          class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--сканирование на entity будет в этом пакете-->
        <property name="packagesToScan" value="com.zaurtregulov.spring.mvc"/>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.PostgresPlusDialect</prop>
                <prop key="hibernate.show_sql">true</prop>
            </props>
        </property>
    </bean>
    <!--чтобы не открывать и не закрывать транзакцию-->
    <!--напрямую не будем работать с транзакциями-->
    <!--будем использовать над методом аннотацию transuctional-->
    <bean id="transactionManager"
          class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="factory"/>
    </bean>
    <!--активируем аннотацию @Trunsactional-->
    <tx:annotation-driven transaction-manager="transactionManager"/>
</beans>